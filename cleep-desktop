#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import os
import signal
import time
import logging
import platform
from PyQt5.QtCore import QSettings

VERSION = '0.0.0'

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(name)s.%(funcName)s +%(lineno)s: %(levelname)-8s [%(process)d] %(message)s')
logger = logging.getLogger('Cleep-desktop')

#default configuration values
DEFAULT_RPC_PORT = 5610
DEFAULT_COMM_PORT = 5611
if platform.system()=='Windows':
    DEFAULT_HOST = u'localhost' 
else:
    DEFAULT_HOST = u'0.0.0.0'
DEFAULT_PROXY_MODE = 'noproxy'

#handle default config
config = QSettings('cleep', 'cleep-desktop')
logger.info('Config file location: %s' % config.fileName)
if 'version' not in config.allKeys():
    config.setValue('version', VERSION)
else:
    version = config.value('version', type=str)
    if version!=VERSION:
        config.setValue('version', VERSION)
if 'localhost' not in config.allKeys():
    config.setValue('localhost', DEFAULT_HOST)
if 'rpcport' not in config.allKeys():
    config.setValue('rpc_port', DEFAULT_RPC_PORT)
if 'commport' not in config.allKeys():
    config.setValue('comm_port', DEFAULT_COMM_PORT)
if 'proxymode' not in config.allKeys():
    config.setValue('proxy_mode', DEFAULT_PROXY_MODE)
if 'proxyhost' not in config.allKeys():
    config.setValue('proxy_host', '')
if 'proxyport' not in config.allKeys():
    config.setValue('proxy_port', 8080)
if 'isoraspbian' not in config.allKeys():
    config.setValue('iso_raspbian', False)
if 'locale' not in config.allKeys():
    config.setValue('locale', 'en')
config.sync()

#launch processes
logger.debug('Launch processes')
rpc = subprocess.Popen(['python3', 'rpcserver.py'])
ui = subprocess.Popen(['python3', 'ui.py'])

try:
    while True:
        #check processes status
        rpc.poll()
        ui.poll()

        if rpc.returncode is None and ui.returncode is None:
            #processes not terminated
            time.sleep(0.5)

        else:
            #one of processes if terminated, stop program
            logger.info('One of process is terminated. Stop application')
            break

except:
    #stop program when exception occured
    logger.exception('Internal error. Stop application')

#clean everything
if ui:
    try:
        os.kill(ui.pid, signal.SIGTERM)
    except:
        pass
if rpc:
    try:
        os.kill(rpc.pid, signal.SIGTERM)
    except:
        pass

logger.info('Cleep-desktop terminated')

